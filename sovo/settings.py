"""
Django settings for sovo project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

from datetime import datetime, timedelta
from dotenv import load_dotenv

import os

# mongodb 
from mongoengine import connect

# 根据环境加载不同的.env文件
if os.path.exists('/.dockerenv'):
    load_dotenv('.env.docker')
else:
    load_dotenv('.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@n8y2kp0+las7ax^y0^n*%c15!v_8r*ce6)c)97_at35*8ej@1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',  # 禁用admin应用，因为它依赖于Django ORM模型
    'django.contrib.auth',
    'corsheaders', # 跨域 
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_spectacular', # OpenAPI 3.0 schema generator
    # 'drf_spectacular_sidecar',
    'rest_framework_simplejwt',  # JWT 支持
    'rest_framework',
    'rest_framework_mongoengine',
    'django_filters', 
    'accounts',
    'common',
    'records',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 跨域
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



# Swagger 配置
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        }
    },
    'USE_SESSION_AUTH': False,  # 禁止 Swagger 使用 Session 登录
    'PERMISSIONS': [
        'rest_framework.permissions.AllowAny',  # 允许匿名访问Swagger文档
    ],
}

ROOT_URLCONF = 'sovo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sovo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 配置虚拟数据库引擎，确保Django核心功能正常运行
# 主要数据存储在MongoDB中
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.dummy',
    }
}

# 已移除SQLite配置，只使用MongoDB

# 配置会话后端使用Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# mongodb connect 
connect(
    db='sovo',
    host='mongodb://admin:admin@localhost:27017/sovo?authSource=admin',
    authentication_source='admin',       # 认证数据库（通常为 admin）
    authentication_mechanism='SCRAM-SHA-256',  # 加密方式
    alias='default',
    connectTimeoutMS=3000,  # 3秒超时
    serverSelectionTimeoutMS=3000,
    maxPoolSize=50,                     # 连接池大小
    tls=False,                           # 启用 TLS
    # tlsCAFile='/app/certs/ca.crt'  # 需将证书挂载到Django容器
)



# Redis 配置（用于缓存或 Celery）
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{os.getenv('REDIS_HOST', 'redis')}:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            'CONNECTION_POOL_KWARGS': {
                'max_connections': 100,
                'retry_on_timeout': True,
            },
            'SOCKET_CONNECT_TIMEOUT': 5,  # 连接超时
            'SOCKET_TIMEOUT': 5,          # 读写超时
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# 国际化和本地化设置
LANGUAGE_CODE = 'zh-hans'  # 简体中文

TIME_ZONE = 'Asia/Shanghai'  # 亚洲/上海时区

USE_I18N = True  # 启用国际化

USE_L10N = True  # 启用本地化

USE_TZ = True  # 使用时区支持


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'accounts.authentication.jwt_backend.MongoJWTAuthentication',  # 替换为自定义的MongoDB JWT认证
    ],
    # 使用自定义权限类，允许特定公共路径的匿名访问
    'DEFAULT_PERMISSION_CLASSES': [
        'common.permissions.public_paths_permission.PublicPathsPermission',
    ],
    # 配置自定义异常处理器
    'EXCEPTION_HANDLER': 'common.utils.exception_handler.custom_exception_handler'
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'FloatNote API',
    'DESCRIPTION': 'FloatNote项目的API文档',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SCHEMA_PATH_PREFIX': '/api/',
    
    'GENERATE_UNIQUE_OPERATIONS': True,
    'CACHING': False,
    
    # ✅ 正确的 OpenAPI 3.0 安全配置
    'APPEND_COMPONENTS': {  # 替换原有的'COMPONENTS'
        'securitySchemes': {
            'JWT': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
                'description': '输入 JWT Token，格式: Bearer <token>'
            }
        }
    },
    
    # ✅ 全局安全要求
    'SECURITY': [{'JWT': []}],
    
    'SWAGGER_UI_DIST': 'https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.9.0',
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'displayRequestDuration': True,
        'filter': True,
        'tryItOutEnabled': True,
    },
    
    
    # ✅ 添加预处理钩子来处理其他警告
    'PREPROCESSING_HOOKS': [
        'drf_spectacular.hooks.preprocess_exclude_path_format',
    ],
    
    # ✅ 忽略某些警告（可选）
    'IGNORE_WARNINGS': [
        r'could not resolve serializer field "ObjectIdField.*',
        r'unable to resolve type hint for function.*',
        r'could not resolve serializer field "ReferenceField.*',
    ]
}


# JWT 配置（可选）
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=12),  # Access Token 有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Refresh Token 有效期
}

# 日志配置

LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)  # 确保目录存在


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        # 仅保留文件 handler（生产环境）
        'file': {
            'level': 'WARNING',  # 只记录 WARNING 及以上级别（包含 ERROR）
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'django-errors.log'),
            'maxBytes': 1024 * 1024 * 50,  # 50MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        # 控制台输出（可选，开发时查看数据库查询）
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # Django 框架本身的错误和警告
        'django': {
            'handlers': ['file'],
            'level': 'WARNING',  # 只捕获 WARNING 和 ERROR
            'propagate': False,
        },
        # 数据库查询日志（生产环境建议关闭或设为 WARNING）
        'django.db.backends': {
            'handlers': ['console'],  # 开发时输出到控制台
            'level': 'DEBUG',         # 生产环境可改为 'WARNING'
            'propagate': False,
        },
        # 认证日志
        'accounts': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# 开发环境：允许所有域名（不推荐生产使用）
CORS_ALLOW_ALL_ORIGINS = True

# # 生产环境：白名单模式（推荐）
# CORS_ALLOWED_ORIGINS = [
#     "https://yourfrontend.com",
#     "http://localhost:3000",  # 前端开发地址
#     "http://127.0.0.1:8000",  # 本地测试
# ]

# Celery 配置
CELERY_BROKER_URL = CACHES['default']['LOCATION']  # 使用Redis作为消息代理
CELERY_RESULT_BACKEND = CACHES['default']['LOCATION']  # 使用Redis存储任务结果
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE  # 使用与Django相同的时区

# Celery 定时任务配置
CELERY_BEAT_SCHEDULE = {
    'clean_temp_images': {
        'task': 'accounts.tasks.clean_expired_temp_images',
        'schedule': 3600,  # 每小时运行一次
    },
}


# 媒体文件配置
MEDIA_ROOT = os.path.join(BASE_DIR, 'media', 'uploads')
MEDIA_URL = '/media/uploads/'
MAX_UPLOAD_SIZE = 100 * 1024 * 1024  # 100MB

# 允许的文件类型
ALLOWED_FILE_TYPES = {
    'image': ['jpg', 'jpeg', 'png', 'gif', 'webp', 'bmp'],
    'audio': ['mp3', 'wav', 'm4a', 'aac', 'ogg', 'flac'],
    'video': ['mp4', 'mov', 'avi', 'mkv', 'webm', 'flv'],
    'document': ['pdf', 'txt', 'doc', 'docx', 'ppt', 'pptx']
}

# 确保媒体目录存在
os.makedirs(MEDIA_ROOT, exist_ok=True)

# 开发环境使用本地存储
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

# 生产环境建议使用S3 或者OSS存储
# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# AWS_ACCESS_KEY_ID = 'your-key'
# AWS_SECRET_ACCESS_KEY = 'your-secret'
# AWS_STORAGE_BUCKET_NAME = 'your-bucket'